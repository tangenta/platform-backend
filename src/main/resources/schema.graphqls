
type Query {
    users: [User!]!

    user(username: String!): User!
    userById(studentId: Long!): User!

    randomQuestion(
        studentId: Long!
        classes: [QuestionClassification!]!,
        types: [QuestionType!]!
    ): Question!

    answerStatisticByClassAndType(
        studentId: Long!,
        classes: [QuestionClassification!]!,
        types: [QuestionType!]!
    ): AnswerStatistic!
    answerStatisticByClass(studentId: Long!, classes: [QuestionClassification!]!): [AnswerStatistic!]!

    # Show `number` counts of posts from the post where postId=`from` sorted by `sortBy` method.
    # Default SortMethod is sorting by publish time
    showPosts(number: Long!, from: Long!, sortBy: SortMethod): [Post!]!
    showUserPosts(studentId: Long!, number: Long!, from: Long!, sortBy: SortMethod): [Post!]!
    viewPost(postId: Long!): Post!
    favPosts(studentId: Long!, number: Long!, from: Long!): [Post!]

    showComments(postId: Long!, number: Long!, from: Long!): [Comment!]!
    showUserComments(studentId: Long!, number: Long!, from: Long!): [Comment!]!

    following(studentId: Long!, number: Long!, from: Long!): [User!]!
    followers(studentId: Long!, number: Long!, from: Long!): [User!]!

    answersCountRecently(studentId: Long!, dates: [LocalDate!]!): [AnswerCountDatePair!]!
    studentStatistic(studentId: Long!): StudentStatistic!
    studentInfo(studentId: Long!): StudentInfo!

    topStudents(number: Long!, from: Long!): [TopStudent!]!
    profileImageLocation(studentId: Long!): String!

    announcements: [Announcement!]!
}

type Mutation {
    login(username: String!, password: String!): LoginPayload!
    logout(studentId: Long!): Boolean!
    changePassword(studentId: Long!, oldPassword: String!, newPassword: String!): Boolean!

    # always return true if success, otherwise throw an error
    register(username: String!, password: String!, email: String!): Boolean!

    validateAnswer(studentId: Long!, questionId: Long!, answer: String!): Feedback!

    # always return true if success, otherwise throw an error
    createQuestion(studentId: Long!, questionDescription: String!,
        type: QuestionType!, classification: QuestionClassification!,
        correctAnswer: String!, answerDescription: String!, solutions: [String!]
    ): Boolean!

    createPost(studentId: Long!, title: String!, content: String!): Boolean!
    deletePost(studentId: Long!, postId: Long!): Boolean!
    updatePost(studentId: Long!, postId: Long!, title: String!, content: String!): Boolean!
    addFavPost(studentId: Long!, postId: Long!): Boolean!
    deleteFavPost(studentId: Long!, postId: Long!): Boolean!

    addComment(studentId: Long!, postId: Long!, content: String): Boolean!
    deleteComment(studentId: Long!, commentId: Long!): Boolean!

    follow(subjectId: Long!, objectId: Long!): Boolean!
    unFollow(subjectId: Long!, objectId: Long!): Boolean!

    updateStudentInfo(studentId: Long!
        studentName: String
        gender: Gender
        pictureId: Long
        partyBranch: String
        birthday: LocalDate
        nation: String
        nativePlace: String
        politicalLandscape: String
        college: String
        major: String
        currentClass: String
        lengthOfSchooling: String
        state: String
        professionalDirection: String
        admissionDate: LocalDate
        dormitoryNumber: String
        phone: String
        mailCode: String
        idNumber: String
        academicLevel: String
        joinLeagueDate: LocalDate
        englishLevel: String
        graduateSchool: String
        familyCode: String
        familyPhone: String
        fatherName: String
        fatherWorkPlace: String
        fatherPhone: String
        motherName: String
        motherWorkPlace: String
        motherPhone: String
        familyAddress: String
        HMTCode: String): Boolean!
}

schema {
    query: Query
    mutation: Mutation
}

type LoginPayload {
    user: User!
    # Token is used for authentication
    token: String!
}

scalar LocalDate
